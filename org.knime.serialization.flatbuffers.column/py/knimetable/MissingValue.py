# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatc

import flatbuffers

class MissingValue(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMissingValue(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MissingValue()
        x.Init(buf, n + offset)
        return x

    # MissingValue
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MissingValue
    def RowID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # MissingValue
    def ColName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def MissingValueStart(builder): builder.StartObject(2)
def MissingValueAddRowID(builder, rowID): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rowID), 0)
def MissingValueAddColName(builder, colName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(colName), 0)
def MissingValueEnd(builder): return builder.EndObject()
