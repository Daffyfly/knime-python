// automatically generated by the FlatBuffers compiler, do not modify

package org.knime.flatbuffers.flatc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class BooleanCollectionCell extends Table {
  public static BooleanCollectionCell getRootAsBooleanCollectionCell(ByteBuffer _bb) { return getRootAsBooleanCollectionCell(_bb, new BooleanCollectionCell()); }
  public static BooleanCollectionCell getRootAsBooleanCollectionCell(ByteBuffer _bb, BooleanCollectionCell obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public BooleanCollectionCell __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean list() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean value(int j) { int o = __offset(6); return o != 0 ? 0!=bb.get(__vector(o) + j * 1) : false; }
  public int valueLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer valueAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }

  public static int createBooleanCollectionCell(FlatBufferBuilder builder,
      boolean list,
      int valueOffset) {
    builder.startObject(2);
    BooleanCollectionCell.addValue(builder, valueOffset);
    BooleanCollectionCell.addList(builder, list);
    return BooleanCollectionCell.endBooleanCollectionCell(builder);
  }

  public static void startBooleanCollectionCell(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addList(FlatBufferBuilder builder, boolean list) { builder.addBoolean(0, list, false); }
  public static void addValue(FlatBufferBuilder builder, int valueOffset) { builder.addOffset(1, valueOffset, 0); }
  public static int createValueVector(FlatBufferBuilder builder, boolean[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addBoolean(data[i]); return builder.endVector(); }
  public static void startValueVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endBooleanCollectionCell(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

