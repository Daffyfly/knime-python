// automatically generated by the FlatBuffers compiler, do not modify

package org.knime.flatbuffers.flatc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class KnimeTable extends Table {
  public static KnimeTable getRootAsKnimeTable(ByteBuffer _bb) { return getRootAsKnimeTable(_bb, new KnimeTable()); }
  public static KnimeTable getRootAsKnimeTable(ByteBuffer _bb, KnimeTable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public KnimeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Header headers(int j) { return headers(new Header(), j); }
  public Header headers(Header obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int headersLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public Column columns(int j) { return columns(new Column(), j); }
  public Column columns(Column obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int columnsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createKnimeTable(FlatBufferBuilder builder,
      int headersOffset,
      int columnsOffset) {
    builder.startObject(2);
    KnimeTable.addColumns(builder, columnsOffset);
    KnimeTable.addHeaders(builder, headersOffset);
    return KnimeTable.endKnimeTable(builder);
  }

  public static void startKnimeTable(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addHeaders(FlatBufferBuilder builder, int headersOffset) { builder.addOffset(0, headersOffset, 0); }
  public static int createHeadersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startHeadersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addColumns(FlatBufferBuilder builder, int columnsOffset) { builder.addOffset(1, columnsOffset, 0); }
  public static int createColumnsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startColumnsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endKnimeTable(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishKnimeTableBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

